#requires -version 2
<#
.SYNOPSIS
    Remove public IPs from virtual machines
.DESCRIPTION
    Detaches and deletes the public ip address for all public ip addresses in the input CSV
.PARAMETER CSVPath
    Path to the CSV Input file with the list of the public ips
.PARAMETER DetachPip
    Bool - Detach the public IP from the VM network interface (Default == $false)
.PARAMETER DeletePiP
    Bool - Delete the public IP resource (Default == $false)
.INPUTS
    CSV file generated by Get-ReportPublicIps.ps1
.NOTES
    Version:        1.1
    Creation Date:  2/22/22
    Change: V1.0 - Initial script development
            V1.1 - Loop over subscriptions
.NOTES 
    IMPORTANT - When a public IP is deleted the address is released and unrecoverable. 
.NOTES
    LEGAL DISCLAIMER:
    This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment. 
    THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
    We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree:
    (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
    (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
    (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneys' fees, that arise or result from the use or distribution of the Sample Code.
    This posting is provided "AS IS" with no warranties, and confers no rights.
.COMPONENT 
    Requires Module Az.Network
.LINK 
    https://github.com/Azferry/azure-powershell
    https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/remove-public-ip-address-vm#powershell
.EXAMPLE
    Detach the Public IPs from VMs network interface 
    ./Delete-PublicIPs.ps1 -CSVPath ".\PublicIpReport.csv" -DetachPiP $true
.EXAMPLE
    Delete all the unattached IPs resource
    ./Delete-PublicIPs.ps1 -CSVPath ".\PublicIpReport.csv" -DeletePiP $true
.EXAMPLE
    Unattach and Delete the public ip attached to VMs network interface
    ./Delete-PublicIPs.ps1 -CSVPath ".\PublicIpReport.csv" -DetachPiP $true -DeletePiP $true
#>

Param (
  [Parameter(Mandatory=$false)][string]$CSVPath,
  [Parameter(Mandatory=$false)][bool]$DetachPip = $false,
  [Parameter(Mandatory=$false)][bool]$DeletePiP = $false
)

### Check and install require modules
if (Get-Module -ListAvailable -Name "Az.Network") {
  Write-Host "Module Already installed on the system"
}
else {
  Write-Host "Module does not exist - installing module"
  Install-Module Az.Network
}
Import-Module Az.Network


Connect-AzAccount

# $CSVPath = ".\PublicIpReport.csv"

$PublicIpList = Import-CSV -Path $CSVPath
Write-Host "CSV Imported" -ForegroundColor Green
Write-Host ((($PublicIpList).Count).ToString() + " IPs are going to be processed") 
  
Write-Host -nonewline "Do you want to continue with the delete? (Y/N) "
$response = Read-Host
if (($response -ne "Y") -or ($response -ne "y")) { 
  Write-Host "Exit"
  exit 
}

### Get the unique subscription IDs in the CSV
$SubscriptionList = $PublicIpList.SubscriptionId | get-unique

foreach ($Sub in $SubscriptionList ){
    ### For each subscription get list of PIP and set az context 
    $PipList = $PublicIpList | Where-Object {$_.SubscriptionId -eq $Sub}
    Set-AzContext -Subscription $Sub

    ### Loop thorough each public IP
    foreach ($Pip in $PipList){
        $P = Get-AzPublicIpAddress -Name $Pip.PipName -ResourceGroupName $Pip.ResourceGroupName
        ### If DetachPip == True or DetachPip and DeletePiP == True 
        if($DetachPip -or ($DetachPip -and $DeletePiP)){
            try {
                ### Remove the public IP from the NIC 
                if($P.IpConfiguration){
                    $NetworkInterfaceName = ($P.IpConfiguration.Id).Split("/")[8]
                    $nic = Get-AzNetworkInterface -Name $NetworkInterfaceName -ResourceGroupName $Pip.ResourceGroupName
                    if($nic.VirtualMachine.Id){
                        $nic.IpConfigurations[0].publicipaddress.id = $null
                        Set-AzNetworkInterface -NetworkInterface $nic
                        Write-Host("Detached Public IP - " + $Pip.PipName + " from Nic - " + $nic.Name ) -ForegroundColor Green
                    }
                }
                else {
                    Write-Host("Public IP is Already Detached - " + $Pip.PipName) -ForegroundColor Green
                }
            }
            catch {
                Write-Host("Error Detaching Public IP - " + $Pip.PipName) -ForegroundColor Red
            }
        }
        ### If DeletePiP == True or DetachPip and DeletePiP == True 
        if($DeletePiP -or ($DetachPip -and $DeletePiP)) {
            try {
                ### Delete the public ip resource
                Remove-AzPublicIpAddress -Name $Pip.PipName -ResourceGroupName $Pip.ResourceGroupName -Force
                Write-Host("Deleted Public IP - " + $Pip.PipName) -ForegroundColor Green
            }
            catch {
                Write-Host("Error Deleting Public IP - " + $Pip.PipName) -ForegroundColor Red
            }
        }
    }
}
